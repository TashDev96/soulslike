using System;
using System.Collections.Generic;
using Cysharp.Threading.Tasks;
using UnityEngine;
using UnityEngine.AddressableAssets;

/// <summary>
///     this code is generated by Claude.Ai 3.5
///     prompt:
///     write addressables memory manager, which will load addressable assets async using unitask, or just return already loaded ones.
///     also it should have enum owner {Application, Game, Location}, which will be used to clear memory. (every asset is loaded using enum)
///     it should be static class
/// </summary>
public enum AssetOwner
{
	Application,
	Game,
	Location
}

public static class AddressableManager
{
	private static readonly Dictionary<string, object> _loadedAssets = new();
	private static readonly Dictionary<AssetOwner, List<string>> _assetOwners = new()
	{
		{ AssetOwner.Application, new List<string>() },
		{ AssetOwner.Game, new List<string>() },
		{ AssetOwner.Location, new List<string>() }
	};

	public static async UniTask<T> LoadAssetAsync<T>(string address, AssetOwner owner)
	{
		if(_loadedAssets.TryGetValue(address, out var loadedAsset))
		{
			return (T)loadedAsset;
		}

		try
		{
			var asset = await Addressables.LoadAssetAsync<T>(address);
			_loadedAssets[address] = asset;
			_assetOwners[owner].Add(address);
			return asset;
		}
		catch(Exception e)
		{
			Debug.LogError($"Failed to load asset at address {address}: {e.Message}");
			return default;
		}
	}

	public static T LoadAssetImmediately<T>(string address, AssetOwner owner)
	{
		if(_loadedAssets.TryGetValue(address, out var loadedAsset))
		{
			return (T)loadedAsset;
		}

		try
		{
			var asset = Addressables.LoadAssetAsync<T>(address).WaitForCompletion();
			_loadedAssets[address] = asset;
			_assetOwners[owner].Add(address);
			return asset;
		}
		catch(Exception e)
		{
			Debug.LogError($"Failed to load asset instantly at address {address}: {e.Message}");
			return default;
		}
	}

	public static T GetPreloadedAsset<T>(string address)
	{
		if(_loadedAssets.TryGetValue(address, out var loadedAsset))
		{
			return (T)loadedAsset;
		}
		throw new Exception($"Error! asset {address} was not preloaded");
	}

	public static void ClearMemory(AssetOwner owner)
	{
		foreach(var address in _assetOwners[owner])
		{
			if(_loadedAssets.TryGetValue(address, out var asset))
			{
				Addressables.Release(asset);
				_loadedAssets.Remove(address);
			}
		}
		_assetOwners[owner].Clear();
	}

	public static void ClearAllMemory()
	{
		foreach(var asset in _loadedAssets.Values)
		{
			Addressables.Release(asset);
		}

		_loadedAssets.Clear();
		foreach(var list in _assetOwners.Values)
		{
			list.Clear();
		}
	}
}
